import random
from typing import Tuple

import numpy as np

from utils import Agent, AgentState, Decision


class NathanExploit(Agent):
    def set_fitness(self, fitness):
        self.fitness = fitness

    @property
    def initial_state(self) -> AgentState:
        # take first 10 genes
        return None

    def weighted_choice(self, p):
        return [Decision.COOPERATE, Decision.DEFECT][int(random.random() < p)]

    def make_decision(
            self,
            other_agents_decisions: Tuple[Decision, ...],
            previous_state: AgentState,
    ) -> Tuple[Decision, AgentState]:

        genes = [-2.935180344829663, 7.412003785896199, 0.8866174043743655, 9.591037206036985, -5.6195699253106595, 11.06179670247598, 15.627411909831354, 2.9328360527947392, 0.7385022789777059, 1.0787055389374818, -12.358908660627575, -4.489168111160469, 12.076988240042335, -3.7120268483936996, 6.668463982019615, 5.071261866440916, -12.105516079993862, 0.2634201938820217, -4.225065821267442, 3.6761715730224016, 2.889956765601932, -16.39237633982669, 4.725569874882679, 3.1584253811878242, 5.196454800562045, 14.409615701617922, 8.486160506072391, -2.3738246553634785, -5.202355578292894, 12.101843121296678, -1.009271333158416, 9.61987171767586, -13.182449415328593, 0.889146345605117, 4.362950965954922, 4.776984824850842, -13.210445490994276, 9.64903732027304, 7.876958568179132, -0.17643743330845008, 6.030780514278833, 0.9753921405706136, -12.302841646557336, -2.3584105624554113, 12.199925898177979, -6.4854971220797815, -5.123603292085213, 3.9354360156660904, 2.974080939416907, 1.1283779657675852, 0.7913718268685085, -0.15228027858036874, 7.924693779700079, 0.027465567332632557, 14.85393820939168, -9.955282200518287, -0.9765376308999526, 10.776776602141588, 3.8190257324716304, 5.350968957873262, -0.6748031914859721, -7.010093928833775, 4.911265854182092, -8.339304698740042, 3.9466408657844623, 1.5317158071004082, -0.6054263196531654, -1.1498196765011797, 10.91363919055688, 9.607668938756225, 8.739233190384343, 0.6371859366389245, -8.712069956138343, -9.276070216904168, -2.9941664328425257, 0.20737897213793094, 11.617133356827566, -2.6105655814628084, -8.371179056701731, 11.191107423237511, -12.345744968332879, -4.2106008542406546, -0.6880090699158803, 4.344323171054332, 13.58546107979249, 7.355631402511494, 17.4613545529261, -0.8592842475669749, 2.7596260791106997, 7.0063496656305855, -4.311853041870505, -3.2515408706421924, -4.1102014095903705, 1.2936505209939921, 6.456738745741123, -3.9969348947771035, 12.184634210957682, -6.582474243536809, 11.017218305689273, -3.4535196605322316, 2.776424083873807, -0.3218850180105347, -2.655118246333124, -6.074716446803482, -0.6913253452551931, 3.860249877966131, -11.026012980427021, -3.3587966727015215, 1.960605886445371, 7.8786156726401355, 14.904428162581263, 3.2871282008110154, 16.33925558540036, 0.6687328665380252, -4.0455650465977575, 5.102933941331514, -2.5858138797590384, 3.626953763498306, 5.94829499792345, -19.800646275209683, -8.36530280897507, -10.145836528976899, -1.145623523851654, -1.2133660865798939, -8.533331891647052, -18.296590130057947, -20.627606998173754, -0.361379241670289, -0.8336056293930583, 2.960299137471081, -2.9090012069897466, -15.70751479020462, -3.347157640613853, -1.2170520885861325, 10.296039462880138, -11.119559188412678, -4.6920538423150475, -9.169337915788766, 7.586870065242096, -1.761882315291716, 7.763544751985429, -5.090225406232099, 13.531664305114269, -6.581993867828801, -0.13380435497923918, 3.7995954126589178, 1.087715563958088, -1.2124934888649774, 12.225951713544124, 0.2679635077632487, 7.629106202341715, -11.39671040143109, -0.7162782253971487, 4.438118365113838, 3.116913913010472, -6.377529065384411, 1.8554609869263063, -3.232102591520904, -8.235950844675322, -8.446882883533679, -1.1273879285600947, 2.869521605163768, 3.4526864678070734, 1.8937471470979736, 4.728955420766099, -1.3613138612467712, -2.3475281876163647, 1.8019866373205082, -1.8256940762445122, 13.131727691656419, 3.864382725176097, 0.7444288045564129, 15.992625882136538, -13.122786354688044, -0.22348666811852072, -2.2080735173692654, -4.122064726106314, -3.714834182243279, -0.46656264055531416, 6.40934007815365, -13.387232237461918, -0.720936398620852, 1.0312969681488269, -6.429239059036504, -5.317015212154846, -8.374146962340799, 0.028880810672524838, 3.1212461108476215, 4.230718278329547, -6.970628396499776, -6.2142619129150445, -0.9935743985561429, 0.08882787942106841, -5.204427320659878, -13.874954759666512, 2.0638828682637547, -2.563883679647882, 1.8090411987185406, 13.97745162146756, 6.442841888117376, 3.2944519880780905, -18.47242070608182, 15.920418990240972, -12.117982478734923, -6.031090116367801, -5.722115799147239, 18.014337615515405, 3.5785541099750917, 1.6024560681765125, -8.955949802790984, -9.483555205161142, 17.75852591895567, 11.14281789698809, -4.447630270093091, -4.0808621090917905, -2.5214401110095355, 9.332176016798375, -8.836922939582802, 0.4051545894760249, -18.576512172931896, 1.3676395039950986, -2.838134877553582, -3.7246122435191613, 9.615210715398204, -1.44408621949712, -6.828505499937367, -3.4804444778684838, -2.285372405367624, 3.6599110754858017, -11.622904555737378, 11.62308473056903, -1.7483147615049932, -6.839044262762698, -3.75758832918334, -4.672365248444215, -14.159437396274576, -10.276504034132648, -1.3212104882107882, -2.31135500599333, -2.8199579453316703, 4.537179115387242, 1.8502304421862255, -7.266114302055728, 6.643224198811167, -3.4784263851471584, 5.890206944571259, -0.43209159664261676, -0.7300956960031322, 9.803405152489738, -4.392719593020619, 10.755247605373082, -11.256572426211866, 5.474627745003972, 8.263497430929945, -3.0040180764202256, -17.121432777579326, -5.574566684629423, 8.870560675645496, 13.819808696322186, -2.5922658614489547, -0.47132078486176077, 2.4055783533398536, 7.521501748856969, 3.815392637391934, 15.869983732057433, -4.714682897813041, -5.601187262360719, 5.756152487397215, 15.026204247282466, -7.482966652582766, 5.161941757341929, 3.130280697963417, 5.604901608344456, 0.4580921332094454, 3.197400031729827, 3.1702509409421187, 10.148748503370083, -8.176550660815142, -10.947568333782307, 4.507245610293913, 4.320003661865451, 3.9146849955077183, 6.797884579703741, -10.038431806197202, 4.967372930694001, 8.772285088427294, 9.569258774737179, -5.799436081530266, 0.6788913282132015, -10.574084265315182, 3.052900445372876, 8.288114746869214, 2.364962252623532, -4.311894547353119, 5.25352801265988, -1.2602275019754816, -1.524702249164147, 2.148429107257047, -16.37354264569137, 9.703400224209126, 14.428930845272085, 5.917581593085555, 12.18951194723095, -2.477923846856733, 7.690214838125474, 2.2840732541344386, 2.8623023433257497, -6.087007082962057, -0.09245528176672915, 1.2099768759117544, 9.112404944184291, -21.428619343598186, -7.543162179886411, -22.232269484448743, -2.8034525569706625, 2.7807391392863763, 1.1772780314258016, -6.971520536884411, 3.2074023432866223, 7.611181126049207, -22.842433045285283, -3.598342403139849, 10.154714675668401, -2.2227091499178226, 6.309512491375202, -19.58980923608357, -2.003745098820789, -11.929187746438032, 10.221665770273056, -0.6783601910237769, 10.210920872573249, -4.9524780516775415, -0.09336779573406402, -7.028807805978062, 1.4236532969405744, 5.831017622750217, -15.652689044655547, 0.5306955157204348, 7.890711432114286, 2.1229419261036515, 1.4984224899356446, -7.936050120803941, 6.681457232132982, 1.013535127508998, 0.46001219431452917, 12.317408184002193, 11.306300263039768, -1.1742430225090155, 13.367944896908577, -3.7486149116591116, 3.89816681768403, 1.7591957689221724, 0.7355480702368814, -7.546227002583575, -6.004943969717541, -6.554887805859068, -7.964768987122109, 11.816059706007858, 0.40267851982548697, 0.21533000671495184, 4.183118458087552, -5.8919898182749355, -3.707105959967058, 2.047851124198241, -0.7087486835540862, -7.057251527206934, -5.330705414204956, -10.394435507370009, 5.852619170099917, 0.1930057387643004, -11.025143506491053, 0.4729425002422367, -2.4250675698664654, 4.154189333516871, -1.9691559311937212, 7.222917781649028, -2.829911126236321, 9.605075583527311, -7.759952035729017, 4.491326708895373, 8.991987412035261, -2.6869860888735353, 5.134579094120387, -10.162041683028749, -5.347650564483088, -3.028028801365714, -11.742401791045685, -1.2782080262569369, -0.24477196031765036, -5.249266767836718, -7.419642464335876, 5.50153254816323, -1.3459498897210542, -4.889393659017119, -1.6257358472347891, 2.46060499965388, -5.454053277579475, -4.497325894856779, 6.419776790000812, 4.9112850050084385, -10.69298988295485, -3.950461827067548, -4.829954161338486, 1.8431280682527151, 3.465881058004654, 2.468550861624251, 2.1243133374339593, 2.020408103647822, 4.8749088685716755, 4.05188849258068, -8.763086388407316, -3.038326036296804, 0.44809023037444307, -0.26101762191444333, -2.657070063245545, -0.2896272227518204, 8.33891167058743, 1.4235054382353423, -1.0365023190997813, -13.051425536197195, -20.44038937688586, 14.984431150818999, 7.96613260368144, 6.336287260099207, -6.856419572141024, -13.338298267523946, 8.51778705563471, 0.3515774752600423, -0.6364819966580321, -8.589234363257097, 5.774017422351273, -4.876932501536623, -8.391377841345198, -12.698371781888229, -0.6601414160211178, -3.349102658409931, 12.759750131564356, -6.078131083343612, 10.220618154358098, 11.318092780247493, 7.3351259446727335, -0.8580793207228045, 3.6526059927122883, 8.784542873168613, 1.3157110389876236, 1.661808468735525, 15.53559664294769, 1.0878702610049642, 5.432515567488894, -5.064840855278182, 2.681797592752563, 2.3591926624013846, -13.979900723950125, 11.806414833626649, 0.006583305377526605, 14.817194230881238, -7.577368854222948, -5.106277219991123, -7.332146669243126, 8.011347866567576, 1.1994036201378928, 2.4186002561012123, -17.588830714931085, -1.3713477273275076, -7.01850265106442, 11.272181803458649, -10.313750168534076, -0.017442234626461436, -8.96040256966525, -4.941043515545598, 9.03382472277435, -5.433750457340689, -6.429728072851417, 4.9060665266633805, 5.787311501230635, 5.656130759214071, 9.330764769172069, -6.174125334301117, -10.80065183442663, 6.817892601788271]

        defect_chance = genes[0]
        num_rounds = len(other_agents_decisions)

        if num_rounds == 0:
            return self.weighted_choice(defect_chance), genes

        history = [d == Decision.DEFECT for d in other_agents_decisions]

        total_defections = sum(history)
        average = np.average(history)
        weighted_average_1 = np.average(history, weights=np.arange(1, num_rounds + 1) + genes[1])
        weighted_average_2 = np.average(history, weights=np.arange(1, num_rounds + 1) + genes[2])
        window_1 = max(abs(int(100 * genes[3])), 2)
        window_2 = max(abs(int(100 * genes[4])), 2)
        recent_average_1 = np.average(history[:window_1])
        recent_average_2 = np.average(history[:window_2])
        last_defect_1 = history[0]
        last_defect_2 = 0
        last_defect_3 = 0
        last_defect_4 = 0
        if len(history) > 3:
            last_defect_4 = history[3]
        elif len(history) > 2:
            last_defect_3 = history[2]
        elif len(history) > 1:
            last_defect_2 = history[1]

        first_layer = np.array([min(num_rounds, 200), total_defections, average, weighted_average_1, weighted_average_2,
                                recent_average_1, recent_average_2, last_defect_1, last_defect_2, last_defect_3,
                                last_defect_4])

        p_count = 5
        def neuron(features, params_offset):
            value = sum(features * genes[params_offset:params_offset + len(features)]) + \
                    genes[params_offset + len(features)]

            if value > 0:
                return value
            return 0

        second_layer = np.array([
            neuron(first_layer, (i * len(first_layer) + p_count))
            for i in range(len(first_layer) * 3)
        ])
        p_count += (len(first_layer) + 1) * len(first_layer) * 3

        third_layer = neuron(second_layer, p_count)

        p_count += len(second_layer) + 1

        defect_chance += sum(first_layer * genes[p_count:p_count + len(first_layer)])
        p_count += len(first_layer)

        defect_chance += sum(second_layer * genes[p_count:p_count + len(second_layer)])
        p_count += len(second_layer)

        defect_chance += third_layer * genes[p_count]

        return self.weighted_choice(defect_chance), None